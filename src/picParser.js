module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = function(instDirects) { return {instDirects:instDirects, idents:ids, comments:comments}; },
        peg$c1 = peg$FAILED,
        peg$c2 = null,
        peg$c3 = [],
        peg$c4 = function(s) { 
          var instDirects = [];
          instDirects = s.filter(function(obj){
            return obj.type==="inst" || obj.type==="directive";
          });
          //return {instDirects:instDirects, s:s, idents:ids, comments:comments};
          return instDirects;
        },
        peg$c5 = function(s) { return s; },
        peg$c6 = function(def) { return def; },
        peg$c7 = "const",
        peg$c8 = { type: "literal", value: "const", description: "\"const\"" },
        peg$c9 = function(ident, num) { var name, id;
           name = ident.name;
           id=getIdent(name);
           if(id){
             error("Identifier '"+name+"' is already defined! (at line:"+id.line+")");
           }
           id = {type:"ident", subType:"const", constType:"number", name:name, value:num.value, isNumber:true};
           addIdent(id);
           return id;
         },
        peg$c10 = "defFile",
        peg$c11 = { type: "literal", value: "defFile", description: "\"defFile\"" },
        peg$c12 = function(ident, num) { var name, id;
           name = ident.name;
           id=getIdent(name);
           if(id){
             error("Identifier '"+name+"' is already defined! (at line:"+id.line+")");
           }
           id = {type:"ident", subType:"file", name:name, value:num.value};
           addIdent(id);
           return id;
         },
        peg$c13 = "defBit",
        peg$c14 = { type: "literal", value: "defBit", description: "\"defBit\"" },
        peg$c15 = function(ident, bIdent) { var name, id;
           name = ident.name;
           id = getIdent(name);
           if(id){
             error("Identifier '"+name+"' is already defined! (at line:"+id.line+")");
           }
           id = {type:"ident", subType:"bit", name:name,
                 fileIdent:bIdent.fileIdent, bit:bIdent.bit};
           if(bIdent.error) { expected(bIdent.error); }
           addIdent(id);
           return id;
         },
        peg$c16 = ":",
        peg$c17 = { type: "literal", value: ":", description: "\":\"" },
        peg$c18 = function(ident) { var name, id;
           name = ident.name;
           id = getIdent(name);
           if(id){
             if(id.defined || id.subType!=="address"){
               error("Identifier '"+name+"' is already defined! (at line:"+id.line+")");
             }
             id.defined = true;
             id.line=line(); id.column=column();
           } else {
             id = {type:"ident", subType:"address", name:name, defined:true};
             addIdent(id);
           }
           return {type:"directive", subType:"label", ident:id,
                   line:line(), column:column()};
         },
        peg$c19 = "setAddress",
        peg$c20 = { type: "literal", value: "setAddress", description: "\"setAddress\"" },
        peg$c21 = function(num) {
           return {type:"directive", subType:"setAddress", num:num,
                   line:line(), column:column()};
         },
        peg$c22 = "//",
        peg$c23 = { type: "literal", value: "//", description: "\"//\"" },
        peg$c24 = /^[^\n]/,
        peg$c25 = { type: "class", value: "[^\\n]", description: "[^\\n]" },
        peg$c26 = "\n",
        peg$c27 = { type: "literal", value: "\n", description: "\"\\n\"" },
        peg$c28 = function(c) { var obj;
           obj = {type:"comment", subType:"line", comment:c.join(""),
                  line:line(), column:column()};
           comments.push(obj);
           return obj;
         },
        peg$c29 = "/*",
        peg$c30 = { type: "literal", value: "/*", description: "\"/*\"" },
        peg$c31 = void 0,
        peg$c32 = "*/",
        peg$c33 = { type: "literal", value: "*/", description: "\"*/\"" },
        peg$c34 = { type: "any", description: "any character" },
        peg$c35 = function(c) { var obj;
           c=c.map(function(i){return i[1];});
           obj = {type:"comment", subType:"block", comment:c.join(""),
                  line:line(), column:column()};
           comments.push(obj);
           return obj;
         },
        peg$c36 = /^[^}]/,
        peg$c37 = { type: "class", value: "[^}]", description: "[^}]" },
        peg$c38 = function(next) { var name, id;
           name = next.name;
           if(name){
             id = getIdent(name);
             if(id){
               error("'"+name+"'"+JSON.stringify(id));
             } else {
               error("'"+name+"' is not expected or is undefined!");
             }
           } else {
             error("'"+next+"' is unexpected!");
           }
         },
        peg$c39 = "nop",
        peg$c40 = { type: "literal", value: "nop", description: "\"nop\"" },
        peg$c41 = function() { return createInst("nop", null); },
        peg$c42 = "clrWdt",
        peg$c43 = { type: "literal", value: "clrWdt", description: "\"clrWdt\"" },
        peg$c44 = "clrWDT",
        peg$c45 = { type: "literal", value: "clrWDT", description: "\"clrWDT\"" },
        peg$c46 = function() { return createInst("clrWDT", null); },
        peg$c47 = "sleep",
        peg$c48 = { type: "literal", value: "sleep", description: "\"sleep\"" },
        peg$c49 = function() { return createInst("sleep", null); },
        peg$c50 = "retfie",
        peg$c51 = { type: "literal", value: "retfie", description: "\"retfie\"" },
        peg$c52 = function() { return createInst("retfie", null); },
        peg$c53 = "reset",
        peg$c54 = { type: "literal", value: "reset", description: "\"reset\"" },
        peg$c55 = function() { return createInst("reset", null); },
        peg$c56 = "return",
        peg$c57 = { type: "literal", value: "return", description: "\"return\"" },
        peg$c58 = function(ident) { return createInst("return", ident); },
        peg$c59 = "setBSR",
        peg$c60 = { type: "literal", value: "setBSR", description: "\"setBSR\"" },
        peg$c61 = function(ident) { return createInst("setBSR", ident); },
        peg$c62 = "setPCLATH",
        peg$c63 = { type: "literal", value: "setPCLATH", description: "\"setPCLATH\"" },
        peg$c64 = function(ident) { return createInst("setPCLATH", ident); },
        peg$c65 = "clr",
        peg$c66 = { type: "literal", value: "clr", description: "\"clr\"" },
        peg$c67 = function(ident) { return createInst("clr", ident); },
        peg$c68 = "com",
        peg$c69 = { type: "literal", value: "com", description: "\"com\"" },
        peg$c70 = function(idend) { return createInstr("com", ident); },
        peg$c71 = "test",
        peg$c72 = { type: "literal", value: "test", description: "\"test\"" },
        peg$c73 = function(ident) { return createInst("test", ident); },
        peg$c74 = "option",
        peg$c75 = { type: "literal", value: "option", description: "\"option\"" },
        peg$c76 = function(ident) { return createInst("option", ident); },
        peg$c77 = "tris",
        peg$c78 = { type: "literal", value: "tris", description: "\"tris\"" },
        peg$c79 = "A",
        peg$c80 = { type: "literal", value: "A", description: "\"A\"" },
        peg$c81 = "B",
        peg$c82 = { type: "literal", value: "B", description: "\"B\"" },
        peg$c83 = "C",
        peg$c84 = { type: "literal", value: "C", description: "\"C\"" },
        peg$c85 = function(t, ident) { return createInst("tris"+t, ident); },
        peg$c86 = "goto",
        peg$c87 = { type: "literal", value: "goto", description: "\"goto\"" },
        peg$c88 = function(ident) { return createInst("goto", ident); },
        peg$c89 = "call",
        peg$c90 = { type: "literal", value: "call", description: "\"call\"" },
        peg$c91 = function(ident) { return createInst("call", ident); },
        peg$c92 = function(ident, arg) { var obj = createInst("call", ident);
           obj.arg = arg;
           return obj;
         },
        peg$c93 = "=",
        peg$c94 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c95 = "+=",
        peg$c96 = { type: "literal", value: "+=", description: "\"+=\"" },
        peg$c97 = "-=",
        peg$c98 = { type: "literal", value: "-=", description: "\"-=\"" },
        peg$c99 = "&=",
        peg$c100 = { type: "literal", value: "&=", description: "\"&=\"" },
        peg$c101 = "^=",
        peg$c102 = { type: "literal", value: "^=", description: "\"^=\"" },
        peg$c103 = "+c",
        peg$c104 = { type: "literal", value: "+C", description: "\"+C\"" },
        peg$c105 = "-b",
        peg$c106 = { type: "literal", value: "-B", description: "\"-B\"" },
        peg$c107 = "+1",
        peg$c108 = { type: "literal", value: "+1", description: "\"+1\"" },
        peg$c109 = "+w",
        peg$c110 = { type: "literal", value: "+W", description: "\"+W\"" },
        peg$c111 = "-1",
        peg$c112 = { type: "literal", value: "-1", description: "\"-1\"" },
        peg$c113 = "-w",
        peg$c114 = { type: "literal", value: "-W", description: "\"-W\"" },
        peg$c115 = "-w-b",
        peg$c116 = { type: "literal", value: "-W-B", description: "\"-W-B\"" },
        peg$c117 = "-w+c",
        peg$c118 = { type: "literal", value: "-W+C", description: "\"-W+C\"" },
        peg$c119 = "^0xff",
        peg$c120 = { type: "literal", value: "^0xFF", description: "\"^0xFF\"" },
        peg$c121 = "^255",
        peg$c122 = { type: "literal", value: "^255", description: "\"^255\"" },
        peg$c123 = function(dest, op, src, ex) { var obj = createInst("assignment", null);
            if(!ex){ex="";} 
            ex=ex.toUpperCase();
            obj.op=op; obj.src=src; obj.dest=dest; obj.ex=ex;
            return obj;
         },
        peg$c124 = "if",
        peg$c125 = { type: "literal", value: "if", description: "\"if\"" },
        peg$c126 = "not",
        peg$c127 = { type: "literal", value: "Not", description: "\"Not\"" },
        peg$c128 = "!",
        peg$c129 = { type: "literal", value: "!", description: "\"!\"" },
        peg$c130 = { type: "literal", value: "not", description: "\"not\"" },
        peg$c131 = "w",
        peg$c132 = { type: "literal", value: "w", description: "\"w\"" },
        peg$c133 = "Borrow",
        peg$c134 = { type: "literal", value: "Borrow", description: "\"Borrow\"" },
        peg$c135 = "==",
        peg$c136 = { type: "literal", value: "==", description: "\"==\"" },
        peg$c137 = "!=",
        peg$c138 = { type: "literal", value: "!=", description: "\"!=\"" },
        peg$c139 = "+",
        peg$c140 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c141 = "-",
        peg$c142 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c143 = /^[01]/,
        peg$c144 = { type: "class", value: "[01]", description: "[01]" },
        peg$c145 = function(not, n, w, ident, pre, block, elseBlock) { // if no cmp & ident is 'bit' then 'BitSet', or is 'file' then 'NotZero'
           var ifText = text().split(")")[0]+")";
           not = n?!not:!!not;
           if(pre) { pre = pre[0]+pre[2]; } 
           if(ident==="Borrow") { ident=getIdent("Carry"); not=!not; }
           return {type:"inst", subType:"if", not:not, wAssign:!!w,
                   ident:ident, pre:pre, block:block, elseBlock:elseBlock,
                   line:line(), column:column(), text:ifText};
         },
        peg$c146 = "Not",
        peg$c147 = "Bit",
        peg$c148 = { type: "literal", value: "Bit", description: "\"Bit\"" },
        peg$c149 = "Set",
        peg$c150 = { type: "literal", value: "Set", description: "\"Set\"" },
        peg$c151 = "Clr",
        peg$c152 = { type: "literal", value: "Clr", description: "\"Clr\"" },
        peg$c153 = function(not, t, ident, block, elseBlock) { var ifText = text().split(")")[0]+")";
           if(ident.subType!=="bit"){ 
             error("Expected 'bit' identifier, but found '"+ident.name+"'");
           }
           if(t==="Clr") { not=!not; }
           return {type:"inst", subType:"if", not:!!not, wAssign:false,
                   ident:ident, pre:"", block:block, elseBlock:elseBlock,
                   line:line(), column:column(), text:ifText};
         },
        peg$c154 = ".",
        peg$c155 = { type: "literal", value: ".", description: "\".\"" },
        peg$c156 = "set",
        peg$c157 = { type: "literal", value: "set", description: "\"set\"" },
        peg$c158 = function(bitIdent, t) { 
           return {type:"inst", subType:"bit"+t.toLowerCase(), ident:bitIdent,
                   line:line(), column:column(), text:text().trim()}; 
         },
        peg$c159 = function(statements) { return statements; },
        peg$c160 = "else",
        peg$c161 = { type: "literal", value: "else", description: "\"else\"" },
        peg$c162 = function(block) { return block; },
        peg$c163 = function(ident) {
           var id, name=ident.name 
           id = getIdent(name);
           // expect an addressIdent
           if(id) {
             return id;
           } else {
             // OK assume that it is defined some where ahead
             id = {type:"ident", subType:"address", name:name, defined:false};
             addIdent(id);
           }
           return id;
         },
        peg$c164 = function(ident) {
          var id=getIdent(ident.name);
          if(id) { return id; }
          else { error("'"+ident.name+"' is not defined!"); }
        },
        peg$c165 = function(ident) { var id=getIdent(ident.name);
            if(!id) { error("'"+ident.name+"' is not defined!"); }
            return id.subType==="bit"; },
        peg$c166 = function(ident) { id = getIdent(ident.name); return id; },
        peg$c167 = function(ident) { return getIdent(ident.name).subType==="file"; },
        peg$c168 = function(ident, bit) { return {type:"ident", subType:"bit", fileIdent:ident, bit:bit}; },
        peg$c169 = function(id) { return id; },
        peg$c170 = /^[_a-zA-Z]/,
        peg$c171 = { type: "class", value: "[_a-zA-Z]", description: "[_a-zA-Z]" },
        peg$c172 = /^[_0-9a-zA-Z]/,
        peg$c173 = { type: "class", value: "[_0-9a-zA-Z]", description: "[_0-9a-zA-Z]" },
        peg$c174 = function(f, r) { return (f+r) in reservedWords; },
        peg$c175 = function(f, r) { return {type:"identRef", name:f+r, line:line(), column:column()}; },
        peg$c176 = function(f, r) { return f+r; },
        peg$c177 = function(num) { return {type:"number", value:num, isNumber:true}; },
        peg$c178 = "0x",
        peg$c179 = { type: "literal", value: "0x", description: "\"0x\"" },
        peg$c180 = /^[0-9a-fA-F]/,
        peg$c181 = { type: "class", value: "[0-9a-fA-F]", description: "[0-9a-fA-F]" },
        peg$c182 = function(d) { return parseInt(d, 16); },
        peg$c183 = /^[0-9]/,
        peg$c184 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c185 = function(d) { return parseInt(d, 10); },
        peg$c186 = "0b",
        peg$c187 = { type: "literal", value: "0b", description: "\"0b\"" },
        peg$c188 = "0B",
        peg$c189 = { type: "literal", value: "0B", description: "\"0B\"" },
        peg$c190 = function(d) { return parseInt(d, 2); },
        peg$c191 = /^[0-7]/,
        peg$c192 = { type: "class", value: "[0-7]", description: "[0-7]" },
        peg$c193 = function(b) { return parseInt(b, 10); },
        peg$c194 = "(",
        peg$c195 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c196 = function() { return "("; },
        peg$c197 = ")",
        peg$c198 = { type: "literal", value: ")", description: "\")\"" },
        peg$c199 = function() { return ")"; },
        peg$c200 = function() { return "()"; },
        peg$c201 = "{",
        peg$c202 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c203 = function() { return String.fromCharCode(123); },
        peg$c204 = "}",
        peg$c205 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c206 = function() { return String.fromCharCode(125); },
        peg$c207 = /^[ \t]/,
        peg$c208 = { type: "class", value: "[ \\t]", description: "[ \\t]" },
        peg$c209 = /^[;\n\r]/,
        peg$c210 = { type: "class", value: "[;\\n\\r]", description: "[;\\n\\r]" },
        peg$c211 = function() { return "[end]"; },
        peg$c212 = ",",
        peg$c213 = { type: "literal", value: ",", description: "\",\"" },
        peg$c214 = /^[ \t\n\r]/,
        peg$c215 = { type: "class", value: "[ \\t\\n\\r]", description: "[ \\t\\n\\r]" },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsestart() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsestatements();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c0(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsestatements() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 === peg$FAILED) {
        s1 = peg$c2;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsedef();
        if (s3 === peg$FAILED) {
          s3 = peg$parsesetAddress();
          if (s3 === peg$FAILED) {
            s3 = peg$parselineComment();
            if (s3 === peg$FAILED) {
              s3 = peg$parseblockComment();
              if (s3 === peg$FAILED) {
                s3 = peg$parseblockStatement();
                if (s3 === peg$FAILED) {
                  s3 = peg$parsestatement();
                }
              }
            }
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsedef();
          if (s3 === peg$FAILED) {
            s3 = peg$parsesetAddress();
            if (s3 === peg$FAILED) {
              s3 = peg$parselineComment();
              if (s3 === peg$FAILED) {
                s3 = peg$parseblockComment();
                if (s3 === peg$FAILED) {
                  s3 = peg$parseblockStatement();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parsestatement();
                  }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c4(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseblockStatement() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseblock();
      if (s1 === peg$FAILED) {
        s1 = peg$parseif();
        if (s1 === peg$FAILED) {
          s1 = peg$parseifBit();
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsestatement() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsenop();
      if (s1 === peg$FAILED) {
        s1 = peg$parsegoto();
        if (s1 === peg$FAILED) {
          s1 = peg$parsereturn();
          if (s1 === peg$FAILED) {
            s1 = peg$parseclrWdt();
            if (s1 === peg$FAILED) {
              s1 = peg$parsesleep();
              if (s1 === peg$FAILED) {
                s1 = peg$parseretfie();
                if (s1 === peg$FAILED) {
                  s1 = peg$parsesetBSR();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parsesetPCLATH();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parseclr();
                      if (s1 === peg$FAILED) {
                        s1 = peg$parsetest();
                        if (s1 === peg$FAILED) {
                          s1 = peg$parseoption();
                          if (s1 === peg$FAILED) {
                            s1 = peg$parsetris();
                            if (s1 === peg$FAILED) {
                              s1 = peg$parsereset();
                              if (s1 === peg$FAILED) {
                                s1 = peg$parsecallCall();
                                if (s1 === peg$FAILED) {
                                  s1 = peg$parsecall();
                                  if (s1 === peg$FAILED) {
                                    s1 = peg$parseassignment();
                                    if (s1 === peg$FAILED) {
                                      s1 = peg$parsebitClrSet();
                                      if (s1 === peg$FAILED) {
                                        s1 = peg$parseunexpected();
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsedef() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsedefConst();
      if (s1 === peg$FAILED) {
        s1 = peg$parsedefFile();
        if (s1 === peg$FAILED) {
          s1 = peg$parsedefBit();
          if (s1 === peg$FAILED) {
            s1 = peg$parselabel();
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c6(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsedefConst() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c7) {
        s1 = peg$c7;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c8); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parselbrkt();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseident();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsewsComma();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsenumber();
              if (s5 !== peg$FAILED) {
                s6 = peg$parserbrkt();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseend();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c9(s3, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsedefFile() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c10) {
        s1 = peg$c10;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c11); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parselbrkt();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseident();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsewsComma();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsenumber();
              if (s5 !== peg$FAILED) {
                s6 = peg$parserbrkt();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseend();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c12(s3, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsedefBit() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c13) {
        s1 = peg$c13;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c14); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parselbrkt();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseident();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsewsComma();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsebitIdent();
              if (s5 !== peg$FAILED) {
                s6 = peg$parserbrkt();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseend();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c15(s3, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parselabel() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseident();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s2 = peg$c16;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c17); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c18(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsesetAddress() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 10) === peg$c19) {
        s1 = peg$c19;
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c20); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parselbrkt();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsenumber();
          if (s3 !== peg$FAILED) {
            s4 = peg$parserbrkt();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseend();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c21(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parselineComment() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c22) {
        s1 = peg$c22;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c23); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c24.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c25); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c24.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c25); }
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 10) {
            s3 = peg$c26;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c27); }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 === peg$FAILED) {
              s4 = peg$c2;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c28(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseblockComment() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c29) {
        s1 = peg$c29;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c30); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c32) {
          s5 = peg$c32;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c33); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = peg$c31;
        } else {
          peg$currPos = s4;
          s4 = peg$c1;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c34); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c1;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 2) === peg$c32) {
            s5 = peg$c32;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c33); }
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = peg$c31;
          } else {
            peg$currPos = s4;
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c34); }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c32) {
            s3 = peg$c32;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c33); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 === peg$FAILED) {
              s4 = peg$c2;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c35(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseunexpected() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseident();
      if (s1 === peg$FAILED) {
        s1 = peg$parseword();
        if (s1 === peg$FAILED) {
          if (peg$c36.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c37); }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c38(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenop() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c39) {
        s1 = peg$c39;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c40); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parselrbrkt();
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseend();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c41();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseclrWdt() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c42) {
        s1 = peg$c42;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c43); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c44) {
          s1 = peg$c44;
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c45); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parselrbrkt();
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseend();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c46();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsesleep() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c47) {
        s1 = peg$c47;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c48); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parselrbrkt();
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseend();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c49();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseretfie() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c50) {
        s1 = peg$c50;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c51); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parselrbrkt();
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseend();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c52();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsereset() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c53) {
        s1 = peg$c53;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c54); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parselrbrkt();
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseend();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c55();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsereturn() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c56) {
        s1 = peg$c56;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c57); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsenumber();
          if (s3 === peg$FAILED) {
            s3 = peg$parserefIdent();
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseend();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c58(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsesetBSR() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c59) {
        s1 = peg$c59;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c60); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parselbrkt();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsenumber();
          if (s3 === peg$FAILED) {
            s3 = peg$parserefIdent();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parserbrkt();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseend();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c61(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsesetPCLATH() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c62) {
        s1 = peg$c62;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c63); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parselbrkt();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsenumber();
          if (s3 === peg$FAILED) {
            s3 = peg$parserefIdent();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parserbrkt();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseend();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c64(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseclr() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c65) {
        s1 = peg$c65;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c66); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parselbrkt();
        if (s2 !== peg$FAILED) {
          s3 = peg$parserefIdent();
          if (s3 !== peg$FAILED) {
            s4 = peg$parserbrkt();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseend();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c67(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsecom() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c68) {
        s1 = peg$c68;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c69); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parselbrkt();
        if (s2 !== peg$FAILED) {
          s3 = peg$parserefIdent();
          if (s3 !== peg$FAILED) {
            s4 = peg$parserbrkt();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseend();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c70(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsetest() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c71) {
        s1 = peg$c71;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c72); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parselbrkt();
        if (s2 !== peg$FAILED) {
          s3 = peg$parserefIdent();
          if (s3 !== peg$FAILED) {
            s4 = peg$parserbrkt();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseend();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c73(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseoption() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c74) {
        s1 = peg$c74;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c75); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parselbrkt();
        if (s2 !== peg$FAILED) {
          s3 = peg$parserefIdent();
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parserbrkt();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseend();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c76(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsetris() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c77) {
        s1 = peg$c77;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c78); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 65) {
          s2 = peg$c79;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c80); }
        }
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 66) {
            s2 = peg$c81;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c82); }
          }
          if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 67) {
              s2 = peg$c83;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c84); }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parselbrkt();
          if (s3 !== peg$FAILED) {
            s4 = peg$parserefIdent();
            if (s4 === peg$FAILED) {
              s4 = peg$c2;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parserbrkt();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseend();
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c85(s2, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsegoto() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c86) {
        s1 = peg$c86;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c87); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseaddressIdent();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseend();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c88(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsecallCall() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c89) {
        s1 = peg$c89;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c90); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parselbrkt();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseaddressIdent();
          if (s3 !== peg$FAILED) {
            s4 = peg$parserbrkt();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseend();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c91(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsecall() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$currPos;
      s3 = peg$parseident();
      if (s3 !== peg$FAILED) {
        s4 = peg$parselbrkt();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$c1;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c1;
      }
      peg$silentFails--;
      if (s2 !== peg$FAILED) {
        peg$currPos = s1;
        s1 = peg$c31;
      } else {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseaddressIdent();
        if (s2 !== peg$FAILED) {
          s3 = peg$parselbrkt();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseident();
            if (s4 === peg$FAILED) {
              s4 = peg$c2;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parserbrkt();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseend();
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c92(s2, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseassignment() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parserefIdent();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c93;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c94); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c95) {
              s3 = peg$c95;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c96); }
            }
            if (s3 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c97) {
                s3 = peg$c97;
                peg$currPos += 2;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c98); }
              }
              if (s3 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c99) {
                  s3 = peg$c99;
                  peg$currPos += 2;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c100); }
                }
                if (s3 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c101) {
                    s3 = peg$c101;
                    peg$currPos += 2;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c102); }
                  }
                }
              }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 === peg$FAILED) {
              s4 = peg$c2;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parserefIdent();
              if (s5 === peg$FAILED) {
                s5 = peg$parsenumber();
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsews();
                if (s6 === peg$FAILED) {
                  s6 = peg$c2;
                }
                if (s6 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2).toLowerCase() === peg$c103) {
                    s7 = input.substr(peg$currPos, 2);
                    peg$currPos += 2;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c104); }
                  }
                  if (s7 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c105) {
                      s7 = input.substr(peg$currPos, 2);
                      peg$currPos += 2;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c106); }
                    }
                    if (s7 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c107) {
                        s7 = peg$c107;
                        peg$currPos += 2;
                      } else {
                        s7 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c108); }
                      }
                      if (s7 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c109) {
                          s7 = input.substr(peg$currPos, 2);
                          peg$currPos += 2;
                        } else {
                          s7 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c110); }
                        }
                        if (s7 === peg$FAILED) {
                          if (input.substr(peg$currPos, 2) === peg$c111) {
                            s7 = peg$c111;
                            peg$currPos += 2;
                          } else {
                            s7 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c112); }
                          }
                          if (s7 === peg$FAILED) {
                            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c113) {
                              s7 = input.substr(peg$currPos, 2);
                              peg$currPos += 2;
                            } else {
                              s7 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c114); }
                            }
                            if (s7 === peg$FAILED) {
                              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c115) {
                                s7 = input.substr(peg$currPos, 4);
                                peg$currPos += 4;
                              } else {
                                s7 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c116); }
                              }
                              if (s7 === peg$FAILED) {
                                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c117) {
                                  s7 = input.substr(peg$currPos, 4);
                                  peg$currPos += 4;
                                } else {
                                  s7 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c118); }
                                }
                                if (s7 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 5).toLowerCase() === peg$c119) {
                                    s7 = input.substr(peg$currPos, 5);
                                    peg$currPos += 5;
                                  } else {
                                    s7 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c120); }
                                  }
                                  if (s7 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 4) === peg$c121) {
                                      s7 = peg$c121;
                                      peg$currPos += 4;
                                    } else {
                                      s7 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c122); }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  if (s7 === peg$FAILED) {
                    s7 = peg$c2;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseend();
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c123(s1, s3, s5, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseif() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c124) {
        s1 = peg$c124;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c125); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsews();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c126) {
            s4 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c127); }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c1;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c1;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parselbrkt();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 33) {
              s5 = peg$c128;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c129); }
            }
            if (s5 === peg$FAILED) {
              s5 = peg$currPos;
              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c126) {
                s6 = input.substr(peg$currPos, 3);
                peg$currPos += 3;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c130); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsews();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c1;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c1;
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsews();
              if (s6 === peg$FAILED) {
                s6 = peg$c2;
              }
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c2;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              if (input.substr(peg$currPos, 1).toLowerCase() === peg$c131) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c132); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsews();
                if (s7 === peg$FAILED) {
                  s7 = peg$c2;
                }
                if (s7 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 61) {
                    s8 = peg$c93;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c94); }
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsews();
                    if (s9 === peg$FAILED) {
                      s9 = peg$c2;
                    }
                    if (s9 !== peg$FAILED) {
                      s6 = [s6, s7, s8, s9];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c1;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c1;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c1;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c1;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$c2;
              }
              if (s5 !== peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c133) {
                  s6 = peg$c133;
                  peg$currPos += 6;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c134); }
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$parsebitIdent();
                  if (s6 === peg$FAILED) {
                    s6 = peg$parserefIdent();
                  }
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$c2;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$currPos;
                  if (input.substr(peg$currPos, 2) === peg$c95) {
                    s8 = peg$c95;
                    peg$currPos += 2;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c96); }
                  }
                  if (s8 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c97) {
                      s8 = peg$c97;
                      peg$currPos += 2;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c98); }
                    }
                    if (s8 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c135) {
                        s8 = peg$c135;
                        peg$currPos += 2;
                      } else {
                        s8 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c136); }
                      }
                      if (s8 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c137) {
                          s8 = peg$c137;
                          peg$currPos += 2;
                        } else {
                          s8 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c138); }
                        }
                        if (s8 === peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 43) {
                            s8 = peg$c139;
                            peg$currPos++;
                          } else {
                            s8 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c140); }
                          }
                          if (s8 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 45) {
                              s8 = peg$c141;
                              peg$currPos++;
                            } else {
                              s8 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c142); }
                            }
                          }
                        }
                      }
                    }
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsews();
                    if (s9 === peg$FAILED) {
                      s9 = peg$c2;
                    }
                    if (s9 !== peg$FAILED) {
                      if (peg$c143.test(input.charAt(peg$currPos))) {
                        s10 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c144); }
                      }
                      if (s10 !== peg$FAILED) {
                        s8 = [s8, s9, s10];
                        s7 = s8;
                      } else {
                        peg$currPos = s7;
                        s7 = peg$c1;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c1;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c1;
                  }
                  if (s7 === peg$FAILED) {
                    s7 = peg$c2;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parserbrkt();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseblock();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseelseBlock();
                        if (s10 === peg$FAILED) {
                          s10 = peg$c2;
                        }
                        if (s10 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c145(s2, s4, s5, s6, s7, s9, s10);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseifBit() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c124) {
        s1 = peg$c124;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c125); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 3) === peg$c146) {
            s4 = peg$c146;
            peg$currPos += 3;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c127); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsews();
            if (s5 === peg$FAILED) {
              s5 = peg$c2;
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c147) {
              s4 = peg$c147;
              peg$currPos += 3;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c148); }
            }
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c149) {
                s5 = peg$c149;
                peg$currPos += 3;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c150); }
              }
              if (s5 === peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c151) {
                  s5 = peg$c151;
                  peg$currPos += 3;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c152); }
                }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parselbrkt();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parserefIdent();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parserbrkt();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseblock();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseelseBlock();
                        if (s10 === peg$FAILED) {
                          s10 = peg$c2;
                        }
                        if (s10 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c153(s3, s5, s7, s9, s10);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsebitClrSet() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$currPos;
      s3 = peg$parseident();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsews();
        if (s4 === peg$FAILED) {
          s4 = peg$c2;
        }
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 46) {
            s5 = peg$c154;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c155); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsews();
            if (s6 === peg$FAILED) {
              s6 = peg$c2;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseident();
              if (s7 === peg$FAILED) {
                s7 = peg$currPos;
                s8 = peg$parsenumber();
                if (s8 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 46) {
                    s9 = peg$c154;
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c155); }
                  }
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c1;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$c1;
                }
              }
              if (s7 === peg$FAILED) {
                s7 = peg$c2;
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsews();
                if (s8 === peg$FAILED) {
                  s8 = peg$c2;
                }
                if (s8 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 3) === peg$c156) {
                    s9 = peg$c156;
                    peg$currPos += 3;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c157); }
                  }
                  if (s9 === peg$FAILED) {
                    if (input.substr(peg$currPos, 3) === peg$c149) {
                      s9 = peg$c149;
                      peg$currPos += 3;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c150); }
                    }
                    if (s9 === peg$FAILED) {
                      if (input.substr(peg$currPos, 3) === peg$c65) {
                        s9 = peg$c65;
                        peg$currPos += 3;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c66); }
                      }
                      if (s9 === peg$FAILED) {
                        if (input.substr(peg$currPos, 3) === peg$c151) {
                          s9 = peg$c151;
                          peg$currPos += 3;
                        } else {
                          s9 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c152); }
                        }
                      }
                    }
                  }
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parselrbrkt();
                    if (s10 === peg$FAILED) {
                      s10 = peg$c2;
                    }
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parseend();
                      if (s11 !== peg$FAILED) {
                        s3 = [s3, s4, s5, s6, s7, s8, s9, s10, s11];
                        s2 = s3;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c1;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c1;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c1;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c1;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c1;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c1;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c1;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c1;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c1;
      }
      peg$silentFails--;
      if (s2 !== peg$FAILED) {
        peg$currPos = s1;
        s1 = peg$c31;
      } else {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsebitIdent();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s4 = peg$c154;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c155); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsews();
              if (s5 === peg$FAILED) {
                s5 = peg$c2;
              }
              if (s5 !== peg$FAILED) {
                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c156) {
                  s6 = input.substr(peg$currPos, 3);
                  peg$currPos += 3;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c157); }
                }
                if (s6 === peg$FAILED) {
                  if (input.substr(peg$currPos, 3).toLowerCase() === peg$c65) {
                    s6 = input.substr(peg$currPos, 3);
                    peg$currPos += 3;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c66); }
                  }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parselrbrkt();
                  if (s7 === peg$FAILED) {
                    s7 = peg$c2;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseend();
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c158(s2, s6);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseblock() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parselbrace();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsestatements();
        if (s2 !== peg$FAILED) {
          s3 = peg$parserbrace();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c159(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseelseBlock() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c160) {
        s1 = peg$c160;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c161); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseblock();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c162(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseaddressIdent() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseident();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c163(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parserefIdent() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseident();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c164(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsebitDefIdent() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parserefIdent();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c165(s1);
        if (s2) {
          s2 = peg$c31;
        } else {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c166(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsefileIdentDotBit() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parserefIdent();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c167(s1);
        if (s2) {
          s2 = peg$c31;
        } else {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsedotBit();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c168(s1, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsebitIdent() {
      var s0;

      s0 = peg$parsebitDefIdent();
      if (s0 === peg$FAILED) {
        s0 = peg$parsefileIdentDotBit();
      }

      return s0;
    }

    function peg$parsedotBit() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s1 = peg$c154;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c155); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parserefIdent();
          if (s3 === peg$FAILED) {
            s3 = peg$parsenumber();
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c169(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseident() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (peg$c170.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c171); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        if (peg$c172.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c173); }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (peg$c172.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c173); }
          }
        }
        if (s3 !== peg$FAILED) {
          s3 = input.substring(s2, peg$currPos);
        }
        s2 = s3;
        if (s2 !== peg$FAILED) {
          peg$reportedPos = peg$currPos;
          s3 = peg$c174(s1, s2);
          if (s3) {
            s3 = peg$c1;
          } else {
            s3 = peg$c31;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c175(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseword() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (peg$c170.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c171); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        if (peg$c172.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c173); }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (peg$c172.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c173); }
          }
        }
        if (s3 !== peg$FAILED) {
          s3 = input.substring(s2, peg$currPos);
        }
        s2 = s3;
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c176(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsenumber() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsehexNum();
      if (s1 === peg$FAILED) {
        s1 = peg$parsedecNum();
        if (s1 === peg$FAILED) {
          s1 = peg$parsebinNum();
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c177(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsehexNum() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c178) {
        s1 = peg$c178;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c179); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        if (peg$c180.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c181); }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$c180.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c181); }
            }
          }
        } else {
          s3 = peg$c1;
        }
        if (s3 !== peg$FAILED) {
          s3 = input.substring(s2, peg$currPos);
        }
        s2 = s3;
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c182(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsedecNum() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      if (peg$c183.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c184); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c183.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c184); }
          }
        }
      } else {
        s2 = peg$c1;
      }
      if (s2 !== peg$FAILED) {
        s2 = input.substring(s1, peg$currPos);
      }
      s1 = s2;
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c185(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsebinNum() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c186) {
        s1 = peg$c186;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c187); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c188) {
          s1 = peg$c188;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c189); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        if (peg$c143.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c144); }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$c143.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c144); }
            }
          }
        } else {
          s3 = peg$c1;
        }
        if (s3 !== peg$FAILED) {
          s3 = input.substring(s2, peg$currPos);
        }
        s2 = s3;
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c190(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsebitNum() {
      var s0, s1;

      s0 = peg$currPos;
      if (peg$c191.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c192); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c193(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parselbrkt() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 === peg$FAILED) {
        s1 = peg$c2;
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c194;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c195); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c196();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parserbrkt() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 === peg$FAILED) {
        s1 = peg$c2;
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 41) {
          s2 = peg$c197;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c198); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c199();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parselrbrkt() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parselbrkt();
      if (s1 !== peg$FAILED) {
        s2 = peg$parserbrkt();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c200();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parselbrace() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 === peg$FAILED) {
        s1 = peg$c2;
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 123) {
          s2 = peg$c201;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c202); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c203();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parserbrace() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 === peg$FAILED) {
        s1 = peg$c2;
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 125) {
          s2 = peg$c204;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c205); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c206();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseend() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c207.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c208); }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c207.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c208); }
        }
      }
      if (s1 !== peg$FAILED) {
        if (peg$c209.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c210); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c211();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsewsComma() {
      var s0, s1, s2, s3;

      s0 = [];
      s1 = peg$parsewsChar();
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parsewsChar();
        }
      } else {
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsews();
        if (s1 === peg$FAILED) {
          s1 = peg$c2;
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s2 = peg$c212;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c213); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsews();
            if (s3 === peg$FAILED) {
              s3 = peg$c2;
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      }

      return s0;
    }

    function peg$parsews() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsewsChar();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsewsChar();
        }
      } else {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsewsChar() {
      var s0;

      if (peg$c214.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c215); }
      }

      return s0;
    }


      // options
      var wIdent, ids, comments, reservedWords
        , addIdent, getIdent, createInst
      ;
      reservedWords = {
        if:1, loop:1, while:1, do:1, until:1, B:1, b:1, c:1,
        clr:1, Clr:1, set:1, Set:1,
        nop:1, clrWdt:1, clrWDT:1, reset:1, Reset:1, return:1, retfie:1,
        setBSR:1, setPCLATH:1, test:1, option:1, Option:1, 
        trisA:1, trisB:1, trisC:1, goto:1, call:1
      };
      options = options || {};
      ids = options.ids || {};          //  can inject predefined's here
      ids.all = ids.all || {};
      ids.consts = ids.consts || {};
      ids.files = ids.files || {};
      ids.bits = ids.bits || {};
      ids.addresses = ids.addresses || {};
      addIdent = function(id){
        var stype, name, status, bit;
        name = id.name;
        if(typeof(name)!=="string" || name===""){
          error("'id.name' is required (in addIdent(id))");
        }
        if(name in reservedWords){
          error("'"+name+"' is a reserved word!");
        }
        if(id.type!=="ident"){
          error("In addIdent(): expected type to be 'ident'!");
        }
        stype = id.subType;
        id.line = line();
        id.column = column();
        id.text = text().trim();
        if(stype==="const"){
          ids.consts[name] = id;
        } else if(stype==="file"){
          ids.files[name] = id;
        } else if(stype==="bit"){
          ids.bits[name] = id;
        } else if(stype==="address"){
          ids.addresses[name] = id;
        } else {
          error("In addIdent(id): unexpected id.subType:'"+stype+"'!");
          return;   
        }
        ids.all[name] = id;
      };
      getIdent = function(name){
        return ids.all[name];
      };
      createInst = function(subType, id){
        return {type:"inst", subType:subType, ident:id, line:line(), column:column(), text:text().trim()};
      }
      if(!ids.all.W){
        wIdent = {type:"ident", subType:"file", name:"W", isW:true, value:0x09};
        addIdent(wIdent);
        wIdent.name = "w";
        addIdent(wIdent);
      }
      comments = [];


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
