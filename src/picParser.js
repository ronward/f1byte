module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = "xxxx",
        peg$c1 = { type: "literal", value: "xxxx", description: "\"xxxx\"" },
        peg$c2 = peg$FAILED,
        peg$c3 = null,
        peg$c4 = [],
        peg$c5 = function(s) { 
          var instDirects = [];
          instDirects = s.filter(function(obj){
            return obj.type==="inst" || obj.type==="directive";
          });
          return {instDirects:instDirects, s:s, idents:ids, comments:comments};
        },
        peg$c6 = function(s) { return s; },
        peg$c7 = function(def) { return def; },
        peg$c8 = "const",
        peg$c9 = { type: "literal", value: "const", description: "\"const\"" },
        peg$c10 = function(ident, num) { var name, id;
           name = ident.name;
           id=getIdent(name);
           if(id){
             error("Identifier '"+name+"' is already defined! (at line:"+id.line+")");
           }
           id = {type:"ident", subType:"const", constType:"number", name:name, value:num.value, isNumber:true};
           addIdent(id);
           return id;
         },
        peg$c11 = "defFile",
        peg$c12 = { type: "literal", value: "defFile", description: "\"defFile\"" },
        peg$c13 = function(ident, num) { var name, id;
           name = ident.name;
           id=getIdent(name);
           if(id){
             error("Identifier '"+name+"' is already defined! (at line:"+id.line+")");
           }
           id = {type:"ident", subType:"file", name:name, value:num.value};
           addIdent(id);
           return id;
         },
        peg$c14 = "defBit",
        peg$c15 = { type: "literal", value: "defBit", description: "\"defBit\"" },
        peg$c16 = function(ident, bIdent) { var name, id;
           name = ident.name;
           id = getIdent(name);
           if(id){
             error("Identifier '"+name+"' is already defined! (at line:"+id.line+")");
           }
           id = {type:"ident", subType:"bit", name:name,
                 fileIdent:bIdent.fileIdent, bit:bIdent.bit};
           if(bIdent.error) { expected(bIdent.error); }
           addIdent(id);
           return id;
         },
        peg$c17 = ":",
        peg$c18 = { type: "literal", value: ":", description: "\":\"" },
        peg$c19 = function(ident) { var name, id;
           name = ident.name;
           id = getIdent(name);
           if(id){
             if(id.defined || id.subType!=="address"){
               error("Identifier '"+name+"' is already defined! (at line:"+id.line+")");
             }
             id.defined = true;
             id.line=line(); id.column=column();
           } else {
             id = {type:"ident", subType:"address", name:name, defined:true};
             addIdent(id);
           }
           return {type:"directive", subType:"label", ident:id,
                   line:line(), column:column()};
         },
        peg$c20 = "setAddress",
        peg$c21 = { type: "literal", value: "setAddress", description: "\"setAddress\"" },
        peg$c22 = function(num) {
           return {type:"directive", subType:"setAddress", num:num,
                   line:line(), column:column()};
         },
        peg$c23 = "//",
        peg$c24 = { type: "literal", value: "//", description: "\"//\"" },
        peg$c25 = /^[^\n]/,
        peg$c26 = { type: "class", value: "[^\\n]", description: "[^\\n]" },
        peg$c27 = "\n",
        peg$c28 = { type: "literal", value: "\n", description: "\"\\n\"" },
        peg$c29 = function(c) { var obj;
           obj = {type:"comment", subType:"line", comment:c.join(""),
                  line:line(), column:column()};
           comments.push(obj);
           return obj;
         },
        peg$c30 = "/*",
        peg$c31 = { type: "literal", value: "/*", description: "\"/*\"" },
        peg$c32 = void 0,
        peg$c33 = "*/",
        peg$c34 = { type: "literal", value: "*/", description: "\"*/\"" },
        peg$c35 = { type: "any", description: "any character" },
        peg$c36 = function(c) { var obj;
           c=c.map(function(i){return i[1];});
           obj = {type:"comment", subType:"block", comment:c.join(""),
                  line:line(), column:column()};
           comments.push(obj);
           return obj;
         },
        peg$c37 = /^[^}]/,
        peg$c38 = { type: "class", value: "[^}]", description: "[^}]" },
        peg$c39 = function(next) { var name, id;
           name = next.name;
           if(name){
             id = getIdent(name);
             if(id){
               error("'"+name+"'"+JSON.stringify(id));
             } else {
               error("'"+name+"' is not expected or is undefined!");
             }
           } else {
             error("'"+next+"' is unexpected!");
           }
         },
        peg$c40 = "nop",
        peg$c41 = { type: "literal", value: "nop", description: "\"nop\"" },
        peg$c42 = function() { return createInst("nop", null); },
        peg$c43 = "clrWdt",
        peg$c44 = { type: "literal", value: "clrWdt", description: "\"clrWdt\"" },
        peg$c45 = "clrWDT",
        peg$c46 = { type: "literal", value: "clrWDT", description: "\"clrWDT\"" },
        peg$c47 = function() { return createInst("clrWDT", null); },
        peg$c48 = "sleep",
        peg$c49 = { type: "literal", value: "sleep", description: "\"sleep\"" },
        peg$c50 = function() { return createInst("sleep", null); },
        peg$c51 = "retfie",
        peg$c52 = { type: "literal", value: "retfie", description: "\"retfie\"" },
        peg$c53 = function() { return createInst("retfie", null); },
        peg$c54 = "reset",
        peg$c55 = { type: "literal", value: "reset", description: "\"reset\"" },
        peg$c56 = function() { return createInst("reset", null); },
        peg$c57 = "return",
        peg$c58 = { type: "literal", value: "return", description: "\"return\"" },
        peg$c59 = function(ident) { return createInst("return", ident); },
        peg$c60 = "setBSR",
        peg$c61 = { type: "literal", value: "setBSR", description: "\"setBSR\"" },
        peg$c62 = function(ident) { return createInst("setBSR", ident); },
        peg$c63 = "setPCLATH",
        peg$c64 = { type: "literal", value: "setPCLATH", description: "\"setPCLATH\"" },
        peg$c65 = function(ident) { return createInst("setPCLATH", ident); },
        peg$c66 = "clr",
        peg$c67 = { type: "literal", value: "clr", description: "\"clr\"" },
        peg$c68 = function(ident) { return createInst("clr", ident); },
        peg$c69 = "com",
        peg$c70 = { type: "literal", value: "com", description: "\"com\"" },
        peg$c71 = function(idend) { return createInstr("com", ident); },
        peg$c72 = "test",
        peg$c73 = { type: "literal", value: "test", description: "\"test\"" },
        peg$c74 = function(ident) { return createInst("test", ident); },
        peg$c75 = "option",
        peg$c76 = { type: "literal", value: "option", description: "\"option\"" },
        peg$c77 = function(ident) { return createInst("option", ident); },
        peg$c78 = "tris",
        peg$c79 = { type: "literal", value: "tris", description: "\"tris\"" },
        peg$c80 = "A",
        peg$c81 = { type: "literal", value: "A", description: "\"A\"" },
        peg$c82 = "B",
        peg$c83 = { type: "literal", value: "B", description: "\"B\"" },
        peg$c84 = "C",
        peg$c85 = { type: "literal", value: "C", description: "\"C\"" },
        peg$c86 = function(t, ident) { return createInst("tris"+t, ident); },
        peg$c87 = "goto",
        peg$c88 = { type: "literal", value: "goto", description: "\"goto\"" },
        peg$c89 = function(ident) { return createInst("goto", ident); },
        peg$c90 = "call",
        peg$c91 = { type: "literal", value: "call", description: "\"call\"" },
        peg$c92 = function(ident) { return createInst("call", ident); },
        peg$c93 = function(ident, arg) { var obj = createInst("call", ident);
           obj.arg = arg;
           return obj;
         },
        peg$c94 = "=",
        peg$c95 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c96 = "+=",
        peg$c97 = { type: "literal", value: "+=", description: "\"+=\"" },
        peg$c98 = "-=",
        peg$c99 = { type: "literal", value: "-=", description: "\"-=\"" },
        peg$c100 = "&=",
        peg$c101 = { type: "literal", value: "&=", description: "\"&=\"" },
        peg$c102 = "^=",
        peg$c103 = { type: "literal", value: "^=", description: "\"^=\"" },
        peg$c104 = "+c",
        peg$c105 = { type: "literal", value: "+C", description: "\"+C\"" },
        peg$c106 = "-b",
        peg$c107 = { type: "literal", value: "-B", description: "\"-B\"" },
        peg$c108 = "+1",
        peg$c109 = { type: "literal", value: "+1", description: "\"+1\"" },
        peg$c110 = "+w",
        peg$c111 = { type: "literal", value: "+W", description: "\"+W\"" },
        peg$c112 = "-1",
        peg$c113 = { type: "literal", value: "-1", description: "\"-1\"" },
        peg$c114 = "-w",
        peg$c115 = { type: "literal", value: "-W", description: "\"-W\"" },
        peg$c116 = "-w-b",
        peg$c117 = { type: "literal", value: "-W-B", description: "\"-W-B\"" },
        peg$c118 = "-w+c",
        peg$c119 = { type: "literal", value: "-W+C", description: "\"-W+C\"" },
        peg$c120 = "^0xff",
        peg$c121 = { type: "literal", value: "^0xFF", description: "\"^0xFF\"" },
        peg$c122 = "^255",
        peg$c123 = { type: "literal", value: "^255", description: "\"^255\"" },
        peg$c124 = function(dest, op, src, ex) { var obj = createInst("assignment", null);
            if(!ex){ex="";} 
            ex=ex.toUpperCase();
            obj.op=op; obj.src=src; obj.dest=dest; obj.ex=ex;
            return obj;
         },
        peg$c125 = "if",
        peg$c126 = { type: "literal", value: "if", description: "\"if\"" },
        peg$c127 = "Not",
        peg$c128 = { type: "literal", value: "Not", description: "\"Not\"" },
        peg$c129 = "BitClr",
        peg$c130 = { type: "literal", value: "BitClr", description: "\"BitClr\"" },
        peg$c131 = "BitSet",
        peg$c132 = { type: "literal", value: "BitSet", description: "\"BitSet\"" },
        peg$c133 = "Borrow",
        peg$c134 = { type: "literal", value: "Borrow", description: "\"Borrow\"" },
        peg$c135 = "==",
        peg$c136 = { type: "literal", value: "==", description: "\"==\"" },
        peg$c137 = "!=",
        peg$c138 = { type: "literal", value: "!=", description: "\"!=\"" },
        peg$c139 = /^[01]/,
        peg$c140 = { type: "class", value: "[01]", description: "[01]" },
        peg$c141 = function(notBitClrSet, ident, pre, block, elseBlock) { // if no cmp & ident is 'bit' then 'BitSet', or is 'file' then 'NotZero'
           var not, ifText = text().split(")")[0]+")";
           not = notBitClrSet==="Not";
           if(pre) { pre = pre[0]+pre[2]; } 
           if(ident==="Borrow") { ident=getIdent("Carry"); not=!not; }
           return {type:"inst", subType:"if", not:!!not, bitClrSet:notBitClrSet,
                   ident:ident, pre:pre, line:line(), column:column(), text:ifText};
         },
        peg$c142 = ".",
        peg$c143 = { type: "literal", value: ".", description: "\".\"" },
        peg$c144 = "set",
        peg$c145 = { type: "literal", value: "set", description: "\"set\"" },
        peg$c146 = "Set",
        peg$c147 = { type: "literal", value: "Set", description: "\"Set\"" },
        peg$c148 = "Clr",
        peg$c149 = { type: "literal", value: "Clr", description: "\"Clr\"" },
        peg$c150 = function(bitIdent, t) { 
           return {type:"inst", subType:"bit"+t.toLowerCase(), bitIdent:bitIdent,
                   line:line(), column:column(), text:text().trim()}; 
         },
        peg$c151 = function(statements) { return statements; },
        peg$c152 = "else",
        peg$c153 = { type: "literal", value: "else", description: "\"else\"" },
        peg$c154 = function(block) { return block; },
        peg$c155 = function(ident) {
           var id, name=ident.name 
           id = getIdent(name);
           // expect an addressIdent
           if(id) {
             return id;
           } else {
             // OK assume that it is defined some where ahead
             id = {type:"ident", subType:"address", name:name, defined:false};
             addIdent(id);
           }
           return id;
         },
        peg$c156 = function(ident) {
          var id=getIdent(ident.name);
          if(id) { return id; }
          else { error("'"+ident.name+"' is not defined!"); }
        },
        peg$c157 = function(ident) { var id=getIdent(ident.name);
            if(!id) { error("'"+ident.name+"' is not defined!"); }
            return id.subType==="bit"; },
        peg$c158 = function(ident) { id = getIdent(ident.name); return id; },
        peg$c159 = function(ident) { return getIdent(ident.name).subType==="file"; },
        peg$c160 = function(ident, bit) { return {type:"ident", subType:"bit", fileIdent:ident, bit:bit}; },
        peg$c161 = function(id) { return id; },
        peg$c162 = /^[_a-zA-Z]/,
        peg$c163 = { type: "class", value: "[_a-zA-Z]", description: "[_a-zA-Z]" },
        peg$c164 = /^[_0-9a-zA-Z]/,
        peg$c165 = { type: "class", value: "[_0-9a-zA-Z]", description: "[_0-9a-zA-Z]" },
        peg$c166 = function(f, r) { return (f+r) in reservedWords; },
        peg$c167 = function(f, r) { return {type:"identRef", name:f+r, line:line(), column:column()}; },
        peg$c168 = function(f, r) { return f+r; },
        peg$c169 = function(num) { return {type:"number", value:num, isNumber:true}; },
        peg$c170 = "0x",
        peg$c171 = { type: "literal", value: "0x", description: "\"0x\"" },
        peg$c172 = /^[0-9a-fA-F]/,
        peg$c173 = { type: "class", value: "[0-9a-fA-F]", description: "[0-9a-fA-F]" },
        peg$c174 = function(d) { return parseInt(d, 16); },
        peg$c175 = /^[0-9]/,
        peg$c176 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c177 = function(d) { return parseInt(d, 10); },
        peg$c178 = "0b",
        peg$c179 = { type: "literal", value: "0b", description: "\"0b\"" },
        peg$c180 = "0B",
        peg$c181 = { type: "literal", value: "0B", description: "\"0B\"" },
        peg$c182 = function(d) { return parseInt(d, 2); },
        peg$c183 = /^[0-7]/,
        peg$c184 = { type: "class", value: "[0-7]", description: "[0-7]" },
        peg$c185 = function(b) { return parseInt(b, 10); },
        peg$c186 = "(",
        peg$c187 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c188 = function() { return "("; },
        peg$c189 = ")",
        peg$c190 = { type: "literal", value: ")", description: "\")\"" },
        peg$c191 = function() { return ")"; },
        peg$c192 = function() { return "()"; },
        peg$c193 = "{",
        peg$c194 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c195 = function() { return String.fromCharCode(123); },
        peg$c196 = "}",
        peg$c197 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c198 = function() { return String.fromCharCode(125); },
        peg$c199 = /^[ \t]/,
        peg$c200 = { type: "class", value: "[ \\t]", description: "[ \\t]" },
        peg$c201 = /^[;\n\r]/,
        peg$c202 = { type: "class", value: "[;\\n\\r]", description: "[;\\n\\r]" },
        peg$c203 = function() { return "[end]"; },
        peg$c204 = ",",
        peg$c205 = { type: "literal", value: ",", description: "\",\"" },
        peg$c206 = /^[ \t\n\r]/,
        peg$c207 = { type: "class", value: "[ \\t\\n\\r]", description: "[ \\t\\n\\r]" },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsestart() {
      var s0;

      s0 = peg$parsestatements();

      return s0;
    }

    function peg$parsexxxx() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c0) {
        s0 = peg$c0;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1); }
      }

      return s0;
    }

    function peg$parsestatements() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 === peg$FAILED) {
        s1 = peg$c3;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsedef();
        if (s3 === peg$FAILED) {
          s3 = peg$parsesetAddress();
          if (s3 === peg$FAILED) {
            s3 = peg$parselineComment();
            if (s3 === peg$FAILED) {
              s3 = peg$parseblockComment();
              if (s3 === peg$FAILED) {
                s3 = peg$parseblockStatement();
                if (s3 === peg$FAILED) {
                  s3 = peg$parsestatement();
                }
              }
            }
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsedef();
          if (s3 === peg$FAILED) {
            s3 = peg$parsesetAddress();
            if (s3 === peg$FAILED) {
              s3 = peg$parselineComment();
              if (s3 === peg$FAILED) {
                s3 = peg$parseblockComment();
                if (s3 === peg$FAILED) {
                  s3 = peg$parseblockStatement();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parsestatement();
                  }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c5(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parseblockStatement() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseblock();
      if (s1 === peg$FAILED) {
        s1 = peg$parseif();
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c6(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsestatement() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsenop();
      if (s1 === peg$FAILED) {
        s1 = peg$parsegoto();
        if (s1 === peg$FAILED) {
          s1 = peg$parsereturn();
          if (s1 === peg$FAILED) {
            s1 = peg$parseclrWdt();
            if (s1 === peg$FAILED) {
              s1 = peg$parsesleep();
              if (s1 === peg$FAILED) {
                s1 = peg$parseretfie();
                if (s1 === peg$FAILED) {
                  s1 = peg$parsesetBSR();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parsesetPCLATH();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parseclr();
                      if (s1 === peg$FAILED) {
                        s1 = peg$parsetest();
                        if (s1 === peg$FAILED) {
                          s1 = peg$parseoption();
                          if (s1 === peg$FAILED) {
                            s1 = peg$parsetris();
                            if (s1 === peg$FAILED) {
                              s1 = peg$parsereset();
                              if (s1 === peg$FAILED) {
                                s1 = peg$parsecallCall();
                                if (s1 === peg$FAILED) {
                                  s1 = peg$parsecall();
                                  if (s1 === peg$FAILED) {
                                    s1 = peg$parseassignment();
                                    if (s1 === peg$FAILED) {
                                      s1 = peg$parsebitClrSet();
                                      if (s1 === peg$FAILED) {
                                        s1 = peg$parseunexpected();
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c6(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsedef() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsedefConst();
      if (s1 === peg$FAILED) {
        s1 = peg$parsedefFile();
        if (s1 === peg$FAILED) {
          s1 = peg$parsedefBit();
          if (s1 === peg$FAILED) {
            s1 = peg$parselabel();
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c7(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsedefConst() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c8) {
        s1 = peg$c8;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c9); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parselbrkt();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseident();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsewsComma();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsenumber();
              if (s5 !== peg$FAILED) {
                s6 = peg$parserbrkt();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseend();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c10(s3, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parsedefFile() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c11) {
        s1 = peg$c11;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parselbrkt();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseident();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsewsComma();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsenumber();
              if (s5 !== peg$FAILED) {
                s6 = peg$parserbrkt();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseend();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c13(s3, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parsedefBit() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c14) {
        s1 = peg$c14;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c15); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parselbrkt();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseident();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsewsComma();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsebitIdent();
              if (s5 !== peg$FAILED) {
                s6 = peg$parserbrkt();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseend();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c16(s3, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parselabel() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseident();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s2 = peg$c17;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c18); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 === peg$FAILED) {
            s3 = peg$c3;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c19(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parsesetAddress() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 10) === peg$c20) {
        s1 = peg$c20;
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c21); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parselbrkt();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsenumber();
          if (s3 !== peg$FAILED) {
            s4 = peg$parserbrkt();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseend();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c22(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parselineComment() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c23) {
        s1 = peg$c23;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c24); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c25.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c26); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c25.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c26); }
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 10) {
            s3 = peg$c27;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c28); }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c3;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 === peg$FAILED) {
              s4 = peg$c3;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c29(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parseblockComment() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c30) {
        s1 = peg$c30;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c31); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c33) {
          s5 = peg$c33;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c34); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = peg$c32;
        } else {
          peg$currPos = s4;
          s4 = peg$c2;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c35); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c2;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c2;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 2) === peg$c33) {
            s5 = peg$c33;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c34); }
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = peg$c32;
          } else {
            peg$currPos = s4;
            s4 = peg$c2;
          }
          if (s4 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c35); }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c2;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c2;
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c33) {
            s3 = peg$c33;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c34); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 === peg$FAILED) {
              s4 = peg$c3;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c36(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parseunexpected() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseident();
      if (s1 === peg$FAILED) {
        s1 = peg$parseword();
        if (s1 === peg$FAILED) {
          if (peg$c37.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c38); }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c39(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenop() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c40) {
        s1 = peg$c40;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c41); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parselrbrkt();
        if (s2 === peg$FAILED) {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseend();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c42();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parseclrWdt() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c43) {
        s1 = peg$c43;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c44); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c45) {
          s1 = peg$c45;
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c46); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parselrbrkt();
        if (s2 === peg$FAILED) {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseend();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c47();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parsesleep() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c48) {
        s1 = peg$c48;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c49); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parselrbrkt();
        if (s2 === peg$FAILED) {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseend();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c50();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parseretfie() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c51) {
        s1 = peg$c51;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c52); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parselrbrkt();
        if (s2 === peg$FAILED) {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseend();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c53();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parsereset() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c54) {
        s1 = peg$c54;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c55); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parselrbrkt();
        if (s2 === peg$FAILED) {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseend();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c56();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parsereturn() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c57) {
        s1 = peg$c57;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c58); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 === peg$FAILED) {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsenumber();
          if (s3 === peg$FAILED) {
            s3 = peg$parserefIdent();
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c3;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseend();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c59(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parsesetBSR() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c60) {
        s1 = peg$c60;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c61); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parselbrkt();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsenumber();
          if (s3 === peg$FAILED) {
            s3 = peg$parserefIdent();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parserbrkt();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseend();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c62(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parsesetPCLATH() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c63) {
        s1 = peg$c63;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c64); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parselbrkt();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsenumber();
          if (s3 === peg$FAILED) {
            s3 = peg$parserefIdent();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parserbrkt();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseend();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c65(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parseclr() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c66) {
        s1 = peg$c66;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c67); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parselbrkt();
        if (s2 !== peg$FAILED) {
          s3 = peg$parserefIdent();
          if (s3 !== peg$FAILED) {
            s4 = peg$parserbrkt();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseend();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c68(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parsecom() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c69) {
        s1 = peg$c69;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c70); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parselbrkt();
        if (s2 !== peg$FAILED) {
          s3 = peg$parserefIdent();
          if (s3 !== peg$FAILED) {
            s4 = peg$parserbrkt();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseend();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c71(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parsetest() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c72) {
        s1 = peg$c72;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c73); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parselbrkt();
        if (s2 !== peg$FAILED) {
          s3 = peg$parserefIdent();
          if (s3 !== peg$FAILED) {
            s4 = peg$parserbrkt();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseend();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c74(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parseoption() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c75) {
        s1 = peg$c75;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c76); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parselbrkt();
        if (s2 !== peg$FAILED) {
          s3 = peg$parserefIdent();
          if (s3 === peg$FAILED) {
            s3 = peg$c3;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parserbrkt();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseend();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c77(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parsetris() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c78) {
        s1 = peg$c78;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c79); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 65) {
          s2 = peg$c80;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c81); }
        }
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 66) {
            s2 = peg$c82;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c83); }
          }
          if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 67) {
              s2 = peg$c84;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c85); }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parselbrkt();
          if (s3 !== peg$FAILED) {
            s4 = peg$parserefIdent();
            if (s4 === peg$FAILED) {
              s4 = peg$c3;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parserbrkt();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseend();
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c86(s2, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parsegoto() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c87) {
        s1 = peg$c87;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c88); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 === peg$FAILED) {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseaddressIdent();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseend();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c89(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parsecallCall() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c90) {
        s1 = peg$c90;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c91); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parselbrkt();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseaddressIdent();
          if (s3 !== peg$FAILED) {
            s4 = peg$parserbrkt();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseend();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c92(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parsecall() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$currPos;
      s3 = peg$parseident();
      if (s3 !== peg$FAILED) {
        s4 = peg$parselbrkt();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$c2;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c2;
      }
      peg$silentFails--;
      if (s2 !== peg$FAILED) {
        peg$currPos = s1;
        s1 = peg$c32;
      } else {
        s1 = peg$c2;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseaddressIdent();
        if (s2 !== peg$FAILED) {
          s3 = peg$parselbrkt();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseident();
            if (s4 === peg$FAILED) {
              s4 = peg$c3;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parserbrkt();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseend();
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c93(s2, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parseassignment() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parserefIdent();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 === peg$FAILED) {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c94;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c95); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c96) {
              s3 = peg$c96;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c97); }
            }
            if (s3 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c98) {
                s3 = peg$c98;
                peg$currPos += 2;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c99); }
              }
              if (s3 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c100) {
                  s3 = peg$c100;
                  peg$currPos += 2;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c101); }
                }
                if (s3 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c102) {
                    s3 = peg$c102;
                    peg$currPos += 2;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c103); }
                  }
                }
              }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 === peg$FAILED) {
              s4 = peg$c3;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parserefIdent();
              if (s5 === peg$FAILED) {
                s5 = peg$parsenumber();
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsews();
                if (s6 === peg$FAILED) {
                  s6 = peg$c3;
                }
                if (s6 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2).toLowerCase() === peg$c104) {
                    s7 = input.substr(peg$currPos, 2);
                    peg$currPos += 2;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c105); }
                  }
                  if (s7 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c106) {
                      s7 = input.substr(peg$currPos, 2);
                      peg$currPos += 2;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c107); }
                    }
                    if (s7 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c108) {
                        s7 = peg$c108;
                        peg$currPos += 2;
                      } else {
                        s7 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c109); }
                      }
                      if (s7 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c110) {
                          s7 = input.substr(peg$currPos, 2);
                          peg$currPos += 2;
                        } else {
                          s7 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c111); }
                        }
                        if (s7 === peg$FAILED) {
                          if (input.substr(peg$currPos, 2) === peg$c112) {
                            s7 = peg$c112;
                            peg$currPos += 2;
                          } else {
                            s7 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c113); }
                          }
                          if (s7 === peg$FAILED) {
                            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c114) {
                              s7 = input.substr(peg$currPos, 2);
                              peg$currPos += 2;
                            } else {
                              s7 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c115); }
                            }
                            if (s7 === peg$FAILED) {
                              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c116) {
                                s7 = input.substr(peg$currPos, 4);
                                peg$currPos += 4;
                              } else {
                                s7 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c117); }
                              }
                              if (s7 === peg$FAILED) {
                                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c118) {
                                  s7 = input.substr(peg$currPos, 4);
                                  peg$currPos += 4;
                                } else {
                                  s7 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c119); }
                                }
                                if (s7 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 5).toLowerCase() === peg$c120) {
                                    s7 = input.substr(peg$currPos, 5);
                                    peg$currPos += 5;
                                  } else {
                                    s7 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c121); }
                                  }
                                  if (s7 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 4) === peg$c122) {
                                      s7 = peg$c122;
                                      peg$currPos += 4;
                                    } else {
                                      s7 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c123); }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  if (s7 === peg$FAILED) {
                    s7 = peg$c3;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseend();
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c124(s1, s3, s5, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c2;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parseif() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c125) {
        s1 = peg$c125;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c126); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c127) {
            s3 = peg$c127;
            peg$currPos += 3;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c128); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c129) {
              s3 = peg$c129;
              peg$currPos += 6;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c130); }
            }
            if (s3 === peg$FAILED) {
              if (input.substr(peg$currPos, 6) === peg$c131) {
                s3 = peg$c131;
                peg$currPos += 6;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c132); }
              }
            }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c3;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parselbrkt();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 6) === peg$c133) {
                s5 = peg$c133;
                peg$currPos += 6;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c134); }
              }
              if (s5 === peg$FAILED) {
                s5 = peg$parsebitIdent();
                if (s5 === peg$FAILED) {
                  s5 = peg$parserefIdent();
                }
              }
              if (s5 === peg$FAILED) {
                s5 = peg$c3;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c96) {
                  s7 = peg$c96;
                  peg$currPos += 2;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c97); }
                }
                if (s7 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c98) {
                    s7 = peg$c98;
                    peg$currPos += 2;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c99); }
                  }
                  if (s7 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c135) {
                      s7 = peg$c135;
                      peg$currPos += 2;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c136); }
                    }
                    if (s7 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c137) {
                        s7 = peg$c137;
                        peg$currPos += 2;
                      } else {
                        s7 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c138); }
                      }
                    }
                  }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsews();
                  if (s8 === peg$FAILED) {
                    s8 = peg$c3;
                  }
                  if (s8 !== peg$FAILED) {
                    if (peg$c139.test(input.charAt(peg$currPos))) {
                      s9 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c140); }
                    }
                    if (s9 !== peg$FAILED) {
                      s7 = [s7, s8, s9];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c2;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c2;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c2;
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$c3;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parserbrkt();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseblock();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseelseBlock();
                      if (s9 === peg$FAILED) {
                        s9 = peg$c3;
                      }
                      if (s9 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c141(s3, s5, s6, s8, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c2;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parsebitClrSet() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$currPos;
      s3 = peg$parseident();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsews();
        if (s4 === peg$FAILED) {
          s4 = peg$c3;
        }
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 46) {
            s5 = peg$c142;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c143); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsews();
            if (s6 === peg$FAILED) {
              s6 = peg$c3;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseident();
              if (s7 === peg$FAILED) {
                s7 = peg$currPos;
                s8 = peg$parsenumber();
                if (s8 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 46) {
                    s9 = peg$c142;
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c143); }
                  }
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c2;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$c2;
                }
              }
              if (s7 === peg$FAILED) {
                s7 = peg$c3;
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsews();
                if (s8 === peg$FAILED) {
                  s8 = peg$c3;
                }
                if (s8 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 3) === peg$c144) {
                    s9 = peg$c144;
                    peg$currPos += 3;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c145); }
                  }
                  if (s9 === peg$FAILED) {
                    if (input.substr(peg$currPos, 3) === peg$c146) {
                      s9 = peg$c146;
                      peg$currPos += 3;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c147); }
                    }
                    if (s9 === peg$FAILED) {
                      if (input.substr(peg$currPos, 3) === peg$c66) {
                        s9 = peg$c66;
                        peg$currPos += 3;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c67); }
                      }
                      if (s9 === peg$FAILED) {
                        if (input.substr(peg$currPos, 3) === peg$c148) {
                          s9 = peg$c148;
                          peg$currPos += 3;
                        } else {
                          s9 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c149); }
                        }
                      }
                    }
                  }
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parselrbrkt();
                    if (s10 === peg$FAILED) {
                      s10 = peg$c3;
                    }
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parseend();
                      if (s11 !== peg$FAILED) {
                        s3 = [s3, s4, s5, s6, s7, s8, s9, s10, s11];
                        s2 = s3;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c2;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c2;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c2;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c2;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c2;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c2;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c2;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c2;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c2;
      }
      peg$silentFails--;
      if (s2 !== peg$FAILED) {
        peg$currPos = s1;
        s1 = peg$c32;
      } else {
        s1 = peg$c2;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsebitIdent();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 === peg$FAILED) {
            s3 = peg$c3;
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s4 = peg$c142;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c143); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsews();
              if (s5 === peg$FAILED) {
                s5 = peg$c3;
              }
              if (s5 !== peg$FAILED) {
                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c144) {
                  s6 = input.substr(peg$currPos, 3);
                  peg$currPos += 3;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c145); }
                }
                if (s6 === peg$FAILED) {
                  if (input.substr(peg$currPos, 3).toLowerCase() === peg$c66) {
                    s6 = input.substr(peg$currPos, 3);
                    peg$currPos += 3;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c67); }
                  }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parselrbrkt();
                  if (s7 === peg$FAILED) {
                    s7 = peg$c3;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseend();
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c150(s2, s6);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c2;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c2;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c2;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parseblock() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parselbrace();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsestatements();
        if (s2 !== peg$FAILED) {
          s3 = peg$parserbrace();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c151(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parseelseBlock() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c152) {
        s1 = peg$c152;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c153); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseblock();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c154(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parseaddressIdent() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseident();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c155(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parserefIdent() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseident();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c156(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsebitDefIdent() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parserefIdent();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c157(s1);
        if (s2) {
          s2 = peg$c32;
        } else {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c158(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parsefileIdentDotBit() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parserefIdent();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c159(s1);
        if (s2) {
          s2 = peg$c32;
        } else {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 === peg$FAILED) {
            s3 = peg$c3;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsedotBit();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c160(s1, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parsebitIdent() {
      var s0;

      s0 = peg$parsebitDefIdent();
      if (s0 === peg$FAILED) {
        s0 = peg$parsefileIdentDotBit();
      }

      return s0;
    }

    function peg$parsedotBit() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s1 = peg$c142;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c143); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 === peg$FAILED) {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parserefIdent();
          if (s3 === peg$FAILED) {
            s3 = peg$parsenumber();
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c161(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parseident() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (peg$c162.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c163); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        if (peg$c164.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c165); }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (peg$c164.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c165); }
          }
        }
        if (s3 !== peg$FAILED) {
          s3 = input.substring(s2, peg$currPos);
        }
        s2 = s3;
        if (s2 !== peg$FAILED) {
          peg$reportedPos = peg$currPos;
          s3 = peg$c166(s1, s2);
          if (s3) {
            s3 = peg$c2;
          } else {
            s3 = peg$c32;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c167(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parseword() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (peg$c162.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c163); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        if (peg$c164.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c165); }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (peg$c164.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c165); }
          }
        }
        if (s3 !== peg$FAILED) {
          s3 = input.substring(s2, peg$currPos);
        }
        s2 = s3;
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c168(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parsenumber() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsehexNum();
      if (s1 === peg$FAILED) {
        s1 = peg$parsedecNum();
        if (s1 === peg$FAILED) {
          s1 = peg$parsebinNum();
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c169(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsehexNum() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c170) {
        s1 = peg$c170;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c171); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        if (peg$c172.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c173); }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$c172.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c173); }
            }
          }
        } else {
          s3 = peg$c2;
        }
        if (s3 !== peg$FAILED) {
          s3 = input.substring(s2, peg$currPos);
        }
        s2 = s3;
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c174(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parsedecNum() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      if (peg$c175.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c176); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c175.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c176); }
          }
        }
      } else {
        s2 = peg$c2;
      }
      if (s2 !== peg$FAILED) {
        s2 = input.substring(s1, peg$currPos);
      }
      s1 = s2;
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c177(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsebinNum() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c178) {
        s1 = peg$c178;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c179); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c180) {
          s1 = peg$c180;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c181); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        if (peg$c139.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c140); }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$c139.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c140); }
            }
          }
        } else {
          s3 = peg$c2;
        }
        if (s3 !== peg$FAILED) {
          s3 = input.substring(s2, peg$currPos);
        }
        s2 = s3;
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c182(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parsebitNum() {
      var s0, s1;

      s0 = peg$currPos;
      if (peg$c183.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c184); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c185(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parselbrkt() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 === peg$FAILED) {
        s1 = peg$c3;
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c186;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c187); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 === peg$FAILED) {
            s3 = peg$c3;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c188();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parserbrkt() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 === peg$FAILED) {
        s1 = peg$c3;
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 41) {
          s2 = peg$c189;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c190); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 === peg$FAILED) {
            s3 = peg$c3;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c191();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parselrbrkt() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parselbrkt();
      if (s1 !== peg$FAILED) {
        s2 = peg$parserbrkt();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c192();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parselbrace() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 === peg$FAILED) {
        s1 = peg$c3;
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 123) {
          s2 = peg$c193;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c194); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 === peg$FAILED) {
            s3 = peg$c3;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c195();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parserbrace() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 === peg$FAILED) {
        s1 = peg$c3;
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 125) {
          s2 = peg$c196;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c197); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 === peg$FAILED) {
            s3 = peg$c3;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c198();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parseend() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c199.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c200); }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c199.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c200); }
        }
      }
      if (s1 !== peg$FAILED) {
        if (peg$c201.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c202); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 === peg$FAILED) {
            s3 = peg$c3;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c203();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parsewsComma() {
      var s0, s1, s2, s3;

      s0 = [];
      s1 = peg$parsewsChar();
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parsewsChar();
        }
      } else {
        s0 = peg$c2;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsews();
        if (s1 === peg$FAILED) {
          s1 = peg$c3;
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s2 = peg$c204;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c205); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsews();
            if (s3 === peg$FAILED) {
              s3 = peg$c3;
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c2;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c2;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c2;
        }
      }

      return s0;
    }

    function peg$parsews() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsewsChar();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsewsChar();
        }
      } else {
        s1 = peg$c2;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsewsChar() {
      var s0;

      if (peg$c206.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c207); }
      }

      return s0;
    }


      // options
      var wIdent, ids, comments, reservedWords
        , addIdent, getIdent, createInst
      ;
      reservedWords = {
        if:1, loop:1, while:1, do:1, until:1, B:1, b:1, c:1,
        clr:1, Clr:1, set:1, Set:1,
        nop:1, clrWdt:1, clrWDT:1, reset:1, Reset:1, return:1, retfie:1,
        setBSR:1, setPCLATH:1, test:1, option:1, Option:1, 
        trisA:1, trisB:1, trisC:1, goto:1, call:1
      };
      options = options || {};
      ids = options.ids || {};          //  can inject predefined's here
      ids.all = ids.all || {};
      ids.consts = ids.consts || {};
      ids.files = ids.files || {};
      ids.bits = ids.bits || {};
      ids.addresses = ids.addresses || {};
      addIdent = function(id){
        var stype, name, status, bit;
        name = id.name;
        if(typeof(name)!=="string" || name===""){
          error("'id.name' is required (in addIdent(id))");
        }
        if(name in reservedWords){
          error("'"+name+"' is a reserved word!");
        }
        if(id.type!=="ident"){
          error("In addIdent(): expected type to be 'ident'!");
        }
        stype = id.subType;
        id.line = line();
        id.column = column();
        id.text = text().trim();
        if(stype==="const"){
          ids.consts[name] = id;
        } else if(stype==="file"){
          ids.files[name] = id;
        } else if(stype==="bit"){
          ids.bits[name] = id;
        } else if(stype==="address"){
          ids.addresses[name] = id;
        } else {
          error("In addIdent(id): unexpected id.subType:'"+stype+"'!");
          return;   
        }
        ids.all[name] = id;
      };
      getIdent = function(name){
        return ids.all[name];
      };
      createInst = function(subType, id){
        return {type:"inst", subType:subType, ident:id, line:line(), column:column(), text:text().trim()};
      }
      if(!ids.all.W){
        wIdent = {type:"ident", subType:"file", name:"W", isW:true};
        addIdent(wIdent);
        wIdent.name = "w";
        addIdent(wIdent);
      }
      comments = [];


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();