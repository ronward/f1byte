// PIC16F1xxxx 
{
  // options
  var wIdent, ids, comments, reservedWords
    , addIdent, getIdent, createInst
  ;
  reservedWords = {
    if:1, loop:1, while:1, do:1, until:1, B:1, b:1, c:1,
    clr:1, Clr:1, set:1, Set:1,
    nop:1, clrWdt:1, clrWDT:1, reset:1, Reset:1, return:1, retfie:1,
    setBSR:1, setPCLATH:1, test:1, option:1, Option:1, 
    trisA:1, trisB:1, trisC:1, goto:1, call:1
  };
  options = options || {};
  ids = options.ids || {};          //  can inject predefined's here
  ids.all = ids.all || {};
  ids.consts = ids.consts || {};
  ids.files = ids.files || {};
  ids.bits = ids.bits || {};
  ids.addresses = ids.addresses || {};
  addIdent = function(id){
    var stype, name, status, bit;
    name = id.name;
    if(typeof(name)!=="string" || name===""){
      error("'id.name' is required (in addIdent(id))");
    }
    if(name in reservedWords){
      error("'"+name+"' is a reserved word!");
    }
    if(id.type!=="ident"){
      error("In addIdent(): expected type to be 'ident'!");
    }
    stype = id.subType;
    id.line = line();
    id.column = column();
    id.text = text().trim();
    if(stype==="const"){
      ids.consts[name] = id;
    } else if(stype==="file"){
      ids.files[name] = id;
    } else if(stype==="bit"){
      ids.bits[name] = id;
    } else if(stype==="address"){
      ids.addresses[name] = id;
    } else {
      error("In addIdent(id): unexpected id.subType:'"+stype+"'!");
      return;   
    }
    ids.all[name] = id;
  };
  getIdent = function(name){
    return ids.all[name];
  };
  createInst = function(subType, id){
    return {type:"inst", subType:subType, ident:id, line:line(), column:column(), text:text().trim()};
  }
  if(!ids.all.W){
    wIdent = {type:"ident", subType:"file", name:"W", isW:true, value:0x09};
    addIdent(wIdent);
    wIdent.name = "w";
    addIdent(wIdent);
  }
  comments = [];
}

start = instDirects:statements
 { return {instDirects:instDirects, idents:ids, comments:comments}; }

statements = ws? s:(def / setAddress / lineComment / blockComment
                / blockStatement / statement)* 
{ 
  var instDirects = [];
  instDirects = s.filter(function(obj){
    return obj.type==="inst" || obj.type==="directive";
  });
  //return {instDirects:instDirects, s:s, idents:ids, comments:comments};
  return instDirects;
}

blockStatement = s:(block / if / ifBit) { return s; }

statement =
 s:( nop 
  / goto / return / clrWdt / sleep / retfie / setBSR / setPCLATH
  / clr / test / option / tris / reset / callCall / call
  / assignment
  / bitClrSet
  / unexpected 
 ) { return s; }

def = def:(defConst / defFile / defBit / label) { return def; }

defConst = "const" lbrkt ident:ident wsComma num:number rbrkt end
 { var name, id;
   name = ident.name;
   id=getIdent(name);
   if(id){
     error("Identifier '"+name+"' is already defined! (at line:"+id.line+")");
   }
   id = {type:"ident", subType:"const", constType:"number", name:name, value:num.value, isNumber:true};
   addIdent(id);
   return id;
 }
defFile = "defFile" lbrkt ident:ident wsComma num:number rbrkt end
 { var name, id;
   name = ident.name;
   id=getIdent(name);
   if(id){
     error("Identifier '"+name+"' is already defined! (at line:"+id.line+")");
   }
   id = {type:"ident", subType:"file", name:name, value:num.value};
   addIdent(id);
   return id;
 }
defBit = "defBit" lbrkt ident:ident wsComma bIdent:bitIdent rbrkt end
 { var name, id;
   name = ident.name;
   id = getIdent(name);
   if(id){
     error("Identifier '"+name+"' is already defined! (at line:"+id.line+")");
   }
   id = {type:"ident", subType:"bit", name:name,
         fileIdent:bIdent.fileIdent, bit:bIdent.bit};
   if(bIdent.error) { expected(bIdent.error); }
   addIdent(id);
   return id;
 }
label = ident:ident ":" ws?
 { var name, id;
   name = ident.name;
   id = getIdent(name);
   if(id){
     if(id.defined || id.subType!=="address"){
       error("Identifier '"+name+"' is already defined! (at line:"+id.line+")");
     }
     id.defined = true;
     id.line=line(); id.column=column();
   } else {
     id = {type:"ident", subType:"address", name:name, defined:true};
     addIdent(id);
   }
   return {type:"directive", subType:"label", ident:id,
           line:line(), column:column()};
 }
setAddress = "setAddress" lbrkt num:number rbrkt end
 {
   return {type:"directive", subType:"setAddress", num:num,
           line:line(), column:column()};
 }
lineComment = "//" c:[^\n]* "\n"? ws?
 { var obj;
   obj = {type:"comment", subType:"line", comment:c.join(""),
          line:line(), column:column()};
   comments.push(obj);
   return obj;
 }
blockComment = "/*" c:(!"*/" .)* "*/" ws?
 { var obj;
   c=c.map(function(i){return i[1];});
   obj = {type:"comment", subType:"block", comment:c.join(""),
          line:line(), column:column()};
   comments.push(obj);
   return obj;
 }
unexpected = next:(ident/word/[^}])
 { var name, id;
   name = next.name;
   if(name){
     id = getIdent(name);
     if(id){
       error("'"+name+"'"+JSON.stringify(id));
     } else {
       error("'"+name+"' is not expected or is undefined!");
     }
   } else {
     error("'"+next+"' is unexpected!");
   }
 }

nop = "nop" lrbrkt? end { return createInst("nop", null); }
clrWdt = ("clrWdt"/"clrWDT") lrbrkt? end { return createInst("clrWDT", null); }
sleep = "sleep" lrbrkt? end { return createInst("sleep", null); }
retfie = "retfie" lrbrkt? end { return createInst("retfie", null); }
reset = "reset" lrbrkt? end { return createInst("reset", null); }

return = "return" ws? ident:(number/refIdent)? end 
 { return createInst("return", ident); }
setBSR = "setBSR" lbrkt ident:(number/refIdent) rbrkt end
 { return createInst("setBSR", ident); }
setPCLATH = "setPCLATH" lbrkt ident:(number/refIdent) rbrkt end
 { return createInst("setPCLATH", ident); }
clr = "clr" lbrkt ident:refIdent rbrkt end
 { return createInst("clr", ident); }
com = "com" lbrkt idend:refIdent rbrkt end
 { return createInstr("com", ident); }
// Note: test(file) same as W=f;
test = "test" lbrkt ident:refIdent rbrkt end
 { return createInst("test", ident); }
option = "option" lbrkt ident:refIdent? rbrkt end
 { return createInst("option", ident); }
tris = "tris" t:("A"/"B"/"C") lbrkt ident:refIdent? rbrkt end
 { return createInst("tris"+t, ident); }
goto = "goto" ws? ident:addressIdent end
 { return createInst("goto", ident); }
callCall = "call" lbrkt ident:addressIdent rbrkt end
 { return createInst("call", ident); }
call = &(ident lbrkt) ident:addressIdent lbrkt arg:ident? rbrkt end
 { var obj = createInst("call", ident);
   obj.arg = arg;
   return obj;
 }

// Note: currently ident Or srcIdent must be 'W'
assignment = dest:refIdent ws? op:("="/"+="/"-="/"&="/"^=") ws?
 src:(refIdent/number)
 ws? ex:("+C"i/"-B"i/"+1"/"+W"i/"-1"/"-W"i/"-W-B"i/"-W+C"i/"^0xFF"i/"^255")? end
 { var obj = createInst("assignment", null);
    if(!ex){ex="";} 
    ex=ex.toUpperCase();
    obj.op=op; obj.src=src; obj.dest=dest; obj.ex=ex;
    return obj;
 }

if = "if" not:(ws "Not"i)? lbrkt n:(("!"/"not"i ws) ws?)? w:("w"i ws? "=" ws?)? ident:("Borrow"/bitIdent/refIdent)? pre:(("+="/"-="/"=="/"!="/"+"/"-") ws? [01])?
 rbrkt block:block elseBlock:elseBlock?
 { // if no cmp & ident is 'bit' then 'BitSet', or is 'file' then 'NotZero'
   var ifText = text().split(")")[0]+")";
   not = n?!not:!!not;
   if(pre) { pre = pre[0]+pre[2]; } 
   if(ident==="Borrow") { ident=getIdent("Carry"); not=!not; }
   return {type:"inst", subType:"if", not:not, wAssign:!!w,
           ident:ident, pre:pre, block:block, elseBlock:elseBlock,
           line:line(), column:column(), text:ifText};
 }
ifBit = "if" ws not:("Not" ws?)? "Bit" t:("Set"/"Clr") lbrkt ident:refIdent rbrkt 
 block:block elseBlock:elseBlock?
 { var ifText = text().split(")")[0]+")";
   if(ident.subType!=="bit"){ 
     error("Expected 'bit' identifier, but found '"+ident.name+"'");
   }
   if(t==="Clr") { not=!not; }
   return {type:"inst", subType:"if", not:!!not, wAssign:false,
           ident:ident, pre:"", block:block, elseBlock:elseBlock,
           line:line(), column:column(), text:ifText};
 }

bitClrSet = &(ident ws? "." ws? (ident/number ".")? ws?
              ("set"/"Set"/"clr"/"Clr") lrbrkt? end)
 bitIdent:bitIdent ws? "." ws? t:("set"i/"clr"i) lrbrkt? end
 { 
   return {type:"inst", subType:"bit"+t.toLowerCase(), ident:bitIdent,
           line:line(), column:column(), text:text().trim()}; 
 }

block = lbrace statements:statements rbrace { return statements; }
elseBlock = "else" block:block { return block; }

addressIdent = ident:ident
 {
   var id, name=ident.name 
   id = getIdent(name);
   // expect an addressIdent
   if(id) {
     return id;
   } else {
     // OK assume that it is defined some where ahead
     id = {type:"ident", subType:"address", name:name, defined:false};
     addIdent(id);
   }
   return id;
 }

refIdent = ident:ident 
{
  var id=getIdent(ident.name);
  if(id) { return id; }
  else { error("'"+ident.name+"' is not defined!"); }
}

bitDefIdent = ident:refIdent 
 &{ var id=getIdent(ident.name);
    if(!id) { error("'"+ident.name+"' is not defined!"); }
    return id.subType==="bit"; }
 { id = getIdent(ident.name); return id; }

fileIdentDotBit = ident:refIdent 
 &{ return getIdent(ident.name).subType==="file"; }
 ws? bit:dotBit
 { return {type:"ident", subType:"bit", fileIdent:ident, bit:bit}; }

bitIdent = bitDefIdent/fileIdentDotBit

dotBit = "." ws? id:(refIdent/number) 
 { return id; }
ident = f:[_a-zA-Z] r:$[_0-9a-zA-Z]*
 !{ return (f+r) in reservedWords; }
 { return {type:"identRef", name:f+r, line:line(), column:column()}; }
word = f:[_a-zA-Z] r:$[_0-9a-zA-Z]* { return f+r; }

number = num:(hexNum / decNum / binNum) 
{ return {type:"number", value:num, isNumber:true}; }
hexNum = "0x" d:$[0-9a-fA-F]+ { return parseInt(d, 16); }
decNum = d:$[0-9]+ { return parseInt(d, 10); }
binNum = ("0b"/"0B") d:$[01]+ { return parseInt(d, 2); }
bitNum = b:[0-7] { return parseInt(b, 10); }
lbrkt = ws? "(" ws? { return "("; }
rbrkt = ws? ")" ws? { return ")"; }
lrbrkt = lbrkt rbrkt { return "()"; }
lbrace = ws? "{" ws? { return String.fromCharCode(123); }
rbrace = ws? "}" ws? { return String.fromCharCode(125); }
//end = ws? ";" ws? { return ";"; }
end = [ \t]* [;\n\r] ws? { return "[end]"; }
wsComma = (wsChar+ / (ws? "," ws?) )
ws = $wsChar+
wsChar = [ \t\n\r]
